Slip 11
Q1)
<!DOCTYPE html>
<html lang=”en”>
<head>
<meta charset=”UTF-8”>
<meta name=”viewport” content=”width=device-width, initial-scale=1.0”>
<style>
Body {
Margin: 0;
Padding: 0;
Font-family: Arial, sans-serif;
Display: flex;
Flex-direction: column;
Height: 100vh;
}
Header {
Background-color: #333;
Color: #fff;
Text-align: center;
Padding: 10px;
}
Main {
Display: flex;
Flex: 1;
}
Nav {
Width: 200px;
Background-color: #f0f0f0;
Padding: 10px;
Box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
}
Nav a {
Display: block;
Margin-bottom: 10px;
Text-decoration: none;
Color: #333;
}
Article {
Flex: 1;
Padding: 20px;
}
</style>
</head>
<body>
<header>
<h1>Company Name</h1>
</header>
<main>
<nav>
<a href=”#” onclick=”showDepartment(‘department1’)”>Department 1</a>
<a href=”#” onclick=”showDepartment(‘department2’)”>Department 2</a>
<a href=”#” onclick=”showDepartment(‘department3’)”>Department 3</a>
<!—Add more departments as needed →
</nav>
<article id=”department-info”>
<!—Department information will be displayed here →
</article>
</main>
<script>
Function showDepartment(department) {
// You can replace the following line with an AJAX request to fetch department information from the server
Const departmentInfo = getDepartmentInfo(department);
// Display department information in the third frame (article)
Document.getElementById(‘department-info’).innerHTML = departmentInfo;
}
Function getDepartmentInfo(department) {
// Simulated department information, replace this with actual data
Const departmentData = {
Department1: ‘Information for Department 1’,
Department2: ‘Information for Department 2’,
Department3: ‘Information for Department 3’,
// Add more departments as needed
};
Return departmentData[department] || ‘Department information not available.’;
}
</script>
</body>
</html>
Q2)

db.createCollection("products")
db.createCollection("customers")
db.createCollection("orders")
db.createCollection("invoices")


db.products.insertMany([
  { _id: 101, name: "Laptop", category: "Electronics", price: 50000, stock: 10 },
  { _id: 102, name: "Phone", category: "Electronics", price: 30000, stock: 20 },
  { _id: 103, name: "Desk", category: "Furniture", price: 7000, stock: 15 },
  { _id: 104, name: "Chair", category: "Furniture", price: 4000, stock: 25 },
  { _id: 105, name: "Headphones", category: "Accessories", price: 2000, stock: 50 }
])

db.customers.insertMany([
  { _id: 201, name: "Mr. Rajiv", email: "rajiv@example.com", phone: "9999999999", address: "Delhi" },
  { _id: 202, name: "Ms. Priya", email: "priya@example.com", phone: "8888888888", address: "Mumbai" },
  { _id: 203, name: "Mr. Arjun", email: "arjun@example.com", phone: "7777777777", address: "Pune" },
  { _id: 204, name: "Ms. Neha", email: "neha@example.com", phone: "6666666666", address: "Bangalore" },
  { _id: 205, name: "Mr. Aman", email: "aman@example.com", phone: "5555555555", address: "Hyderabad" }
])

db.orders.insertMany([
  {
    _id: 301,
    customer_id: 201,
    order_date: ISODate("2025-10-01"),
    items: [
      { product_id: 101, quantity: 1 },
      { product_id: 105, quantity: 2 }
    ],
    total_amount: 54000,
    processed: true
  },
  {
    _id: 302,
    customer_id: 202,
    order_date: ISODate("2025-10-02"),
    items: [
      { product_id: 102, quantity: 1 }
    ],
    total_amount: 30000,
    processed: false
  },
  {
    _id: 303,
    customer_id: 203,
    order_date: ISODate("2025-10-03"),
    items: [
      { product_id: 104, quantity: 5 }
    ],
    total_amount: 20000,
    processed: true
  },
  {
    _id: 304,
    customer_id: 204,
    order_date: ISODate("2025-10-04"),
    items: [
      { product_id: 103, quantity: 3 }
    ],
    total_amount: 21000,
    processed: false
  },
  {
    _id: 305,
    customer_id: 205,
    order_date: ISODate("2025-10-05"),
    items: [
      { product_id: 102, quantity: 2 }
    ],
    total_amount: 60000,
    processed: true
  }
])

db.invoices.insertMany([
  {
    _id: 401,
    order_id: 301,
    invoice_date: ISODate("2025-10-01"),
    payment_method: "Credit Card",
    status: "Paid"
  },
  {
    _id: 402,
    order_id: 303,
    invoice_date: ISODate("2025-10-03"),
    payment_method: "UPI",
    status: "Paid"
  },
  {
    _id: 403,
    order_id: 305,
    invoice_date: ISODate("2025-10-05"),
    payment_method: "Cash",
    status: "Pending"
  }
])





a. List all products in the inventory:
db.products.find()

b. List the details of orders with a value >20000:
db.orders.find({ total_amount: { $gt: 20000 } })

c. List all the orders which have not been processed (invoice not generated):
db.orders.find({ processed: false })


d. List all the orders along with their invoice for “Mr. Rajiv”:
db.orders.aggregate([
  { $match: { customer_id: 201 } },
  {
    $lookup: {
      from: "invoices",
      localField: "_id",
      foreignField: "order_id",
      as: "invoice"
    }
  }
])
