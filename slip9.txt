Slip 9
Q1)
<!DOCTYPE html>
<html lang=”en”>
<head>
<meta charset=”UTF-8”>
<meta name=”viewport” content=”width=device-width, initial-scale=1.0”>
<title>Student Registration Form</title>
<style>
Body {
Font-family: Arial, sans-serif;
Background-color: #f4f4f4;
Margin: 20px;
}
Form {
Max-width: 600px;
Margin: 0 auto;
Background-color: #fff;
Padding: 20px;
Border-radius: 8px;
Box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}
Label {
Display: block;
Margin-bottom: 8px;
Font-weight: bold;
}
Input, select {
Width: 100%;
Padding: 10px;
Margin-bottom: 16px;
Border: 1px solid #ccc;
Border-radius: 4px;
Box-sizing: border-box;
}
Input[type=”submit”] {
Background-color: #4caf50;
Color: #fff;
Cursor: pointer;
}
Input[type=”submit”]:hover {
Background-color: #45a049;
}
</style>
</head>
<body>
<form action=”#” method=”post”>
<h2>Student Registration Form</h2>
<label for=”fullName”>Full Name:</label>
<input type=”text” id=”fullName” name=”fullName” required>
<label for=”email”>Email:</label>
<input type=”email” id=”email” name=”email” required>
<label for=”dateOfBirth”>Date of Birth:</label>
<input type=”date” id=”dateOfBirth” name=”dateOfBirth” required>
<label for=”gender”>Gender:</label>
<select id=”gender” name=”gender” required>
<option value=”male”>Male</option>
<option value=”female”>Female</option>
<option value=”other”>Other</option>
</select>
<label for=”course”>Select Course:</label>
<select id=”course” name=”course” required>
<option value=”computerScience”>Computer Science</option>
<option value=”engineering”>Engineering</option>
<option value=”biology”>Biology</option>
<!—Add more options as needed →
</select>
<label for=”searchCollege”>Search for College:</label>
<input type=”search” id=”searchCollege” name=”searchCollege”>
<label for=”comments”>Additional Comments:</label>
<textarea id=”comments” name=”comments” rows=”4”></textarea>
<input type=”submit” value=”Submit”>
</form>
</body>
</html>


Q2)
db.createCollection("customers");
db.customers.insertMany([
  { _id: 1, name: "Mr. Patil", age: 45, address: "Shivaji Nagar", city: "Pune" },
  { _id: 2, name: "Deepak Sharma", age: 38, address: "MG Road", city: "Pimpri" },
  { _id: 3, name: "Divya Kulkarni", age: 29, address: "Baner", city: "Pune" },
  { _id: 4, name: "Dinesh Joshi", age: 50, address: "Camp", city: "Pimpri" },
  { _id: 5, name: "Neha Deshmukh", age: 33, address: "Karve Road", city: "Nashik" },
  { _id: 6, name: "Raj Malhotra", age: 40, address: "Kothrud", city: "Pune" },
  { _id: 7, name: "Sonal Patil", age: 28, address: "Nigdi", city: "Pimpri" },
  { _id: 8, name: "Dilip Rane", age: 36, address: "Akurdi", city: "Pimpri" },
  { _id: 9, name: "Meena Pawar", age: 42, address: "Hadapsar", city: "Pune" },
  { _id: 10, name: "Kiran Jadhav", age: 31, address: "Viman Nagar", city: "Pune" }
]);

db.createCollection("loans");
db.loans.insertMany([
  { _id: 101, customer_id: 1, loan_type: "Home", loan_amt: 120000, branch: "Pune" },
  { _id: 102, customer_id: 2, loan_type: "Car", loan_amt: 80000, branch: "Pimpri" },
  { _id: 103, customer_id: 3, loan_type: "Personal", loan_amt: 50000, branch: "Pune" },
  { _id: 104, customer_id: 4, loan_type: "Education", loan_amt: 60000, branch: "Pimpri" },
  { _id: 105, customer_id: 5, loan_type: "Home", loan_amt: 150000, branch: "Nashik" },
  { _id: 106, customer_id: 6, loan_type: "Car", loan_amt: 70000, branch: "Pune" },
  { _id: 107, customer_id: 7, loan_type: "Personal", loan_amt: 40000, branch: "Pimpri" },
  { _id: 108, customer_id: 8, loan_type: "Home", loan_amt: 200000, branch: "Pimpri" },
  { _id: 109, customer_id: 9, loan_type: "Education", loan_amt: 90000, branch: "Pune" },
  { _id: 110, customer_id: 10, loan_type: "Car", loan_amt: 60000, branch: "Pune" }
]);


a. List all customers whose name starts with ‘D’ character:
db.customers.find(
  { name: { $regex: "^D" } },
  { _id: 0, name: 1 }
);

b. List the names of customers in descending order who have taken a loan from Pimpri city:
var pimpriCustIds = db.loans.find({ branch: "Pimpri" }).map(l => l.customer_id);

db.customers.find(
  { _id: { $in: pimpriCustIds } },
  { _id: 0, name: 1 }
).sort({ name: -1 });

c. Display customer details having the maximum loan amount:
var maxLoan = db.loans.find().sort({ loan_amt: -1 }).limit(1).toArray()[0];

db.customers.findOne({ _id: maxLoan.customer_id });


d. Update the address of the customer whose name is “Mr. Patil” and loan_amt is greater than 100000:
var cust = db.customers.findOne({ name: "Mr. Patil" });
var loan = db.loans.findOne({ customer_id: cust._id, loan_amt: { $gt: 100000 } });

if (loan) {
  db.customers.updateOne(
    { _id: cust._id },
    { $set: { address: "New Address, Pune" } }
  );
}
