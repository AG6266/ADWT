Q1)
<!DOCTYPE html>
<html lang=”en”>
<head>
<meta charset=”UTF-8”>
<meta name=”viewport” content=”width=device-width, initial-scale=1, shrink-to-fit=no”>
<link rel=”stylesheet” href=https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css>
<title>Image Thumbnails</title>
</head>
<body>
<div class=”container mt-5”>
<h2 class=”mb-4”>Image Thumbnails</h2>
<div class=”row”>
<!—Image 1 →
<div class=”col-md-4”>
<div class=”thumbnail”>
<img src=”path/to/image1.jpg” alt=”Image 1” class=”img-fluid”>
<div class=”caption”>
<h4>Image 1</h4>
</div>
</div>
</div>
<!—Image 2 →
<div class=”col-md-4”>
<div class=”thumbnail”>
<img src=”path/to/image2.jpg” alt=”Image 2” class=”img-fluid”>
<div class=”caption”>
<h4>Image 2</h4>
</div>
</div>
</div>
<!—Image 3 →
<div class=”col-md-4”>
<div class=”thumbnail”>
<img src=”path/to/image3.jpg” alt=”Image 3” class=”img-fluid”>
<div class=”caption”>
<h4>Image 3</h4>
</div>
</div>
</div>
</div>
</div>
<!—Bootstrap JS and Popper.js (optional) →
<script src=https://code.jquery.com/jquery-3.5.1.slim.min.js></script>
<script src=https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js></script>
<script src=https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js></script>
</body>
</html>

Q2)

// Create departments collection
db.createCollection("departments");

// Create employees collection
db.createCollection("employees");

db.departments.insertMany([
  { _id: 1, name: "HR", location: "Pune" },
  { _id: 2, name: "Sales", location: "Mumbai" },
  { _id: 3, name: "IT", location: "Bangalore" },
  { _id: 4, name: "Finance", location: "Delhi" },
  { _id: 5, name: "Marketing", location: "Chennai" }
]);




db.employees.insertMany([
  { _id: 1, name: "John", salary: 60000, dept_id: 2 },
  { _id: 2, name: "Samantha", salary: 75000, dept_id: 3 },
  { _id: 3, name: "Raj", salary: 55000, dept_id: 2 },
  { _id: 4, name: "Priya", salary: 80000, dept_id: 4 },
  { _id: 5, name: "Amit", salary: 45000, dept_id: 1 },
  { _id: 6, name: "Neha", salary: 52000, dept_id: 2 },
  { _id: 7, name: "Vikram", salary: 70000, dept_id: 5 }
]);

a. Display the name of the employee who has the highest salary:
db.employees.find().sort({ salary: -1 }).limit(1).project({ name: 1, _id: 0 });


b. Display the biggest department with the maximum number of employees:
db.employees.aggregate([
  { $group: { _id: "$dept_id", empCount: { $sum: 1 } } },
  { $sort: { empCount: -1 } },
  { $limit: 1 },
  {
    $lookup: {
      from: "departments",
      localField: "_id",
      foreignField: "_id",
      as: "department"
    }
  },
  { $unwind: "$department" },
  { $project: { _id: 0, department: "$department.name", empCount: 1 } }
]);



c. Write a cursor which shows department-wise employee information:
var cursor = db.departments.aggregate([
  {
    $lookup: {
      from: "employees",
      localField: "_id",
      foreignField: "dept_id",
      as: "employees"
    }
  },
  { $project: { _id: 0, Department: "$name", Employees: "$employees.name" } }
]);

cursor.forEach(printjson);



d. List all the employees who work in the Sales department and have a salary greater than 50000:
db.employees.find(
  { dept_id: salesDept._id, salary: { $gt: 50000 } },
  { _id: 0, name: 1, salary: 1 }
);
