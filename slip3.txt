Q1)
<!DOCTYPE html>
<html lang=”en”>
<head>
<meta charset=”UTF-8”>
<meta name=”viewport” content=”width=device-width, initial-scale=1, shrink-to-fit=no”>
<link rel=”stylesheet” href=https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css>
<title>Image Thumbnails</title>
</head>
<body>
<div class=”container mt-5”>
<h2 class=”mb-4”>Image Thumbnails</h2>
<div class=”row”>
<!—Image 1 →
<div class=”col-md-4”>
<div class=”thumbnail”>
<img src=”path/to/image1.jpg” alt=”Image 1” class=”img-fluid”>
<div class=”caption”>
<h4>Image 1</h4>
</div>
</div>
</div>
<!—Image 2 →
<div class=”col-md-4”>
<div class=”thumbnail”>
<img src=”path/to/image2.jpg” alt=”Image 2” class=”img-fluid”>
<div class=”caption”>
<h4>Image 2</h4>
</div>
</div>
</div>
<!—Image 3 →
<div class=”col-md-4”>
<div class=”thumbnail”>
<img src=”path/to/image3.jpg” alt=”Image 3” class=”img-fluid”>
<div class=”caption”>
<h4>Image 3</h4>
</div>
</div>
</div>
</div>
</div>
<!—Bootstrap JS and Popper.js (optional) →
<script src=https://code.jquery.com/jquery-3.5.1.slim.min.js></script>
<script src=https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js></script>
<script src=https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js></script>
</body>
</html>

Q2)
db.departments.insertMany([
  { _id: 1, name: "Sales" },
  { _id: 2, name: "HR" },
  { _id: 3, name: "IT" },
  { _id: 4, name: "Marketing" },
  { _id: 5, name: "Finance" }
])

db.employees.insertMany([
  { name: "John", salary: 60000, department_id: 1 },
  { name: "Asha", salary: 75000, department_id: 3 },
  { name: "Rahul", salary: 50000, department_id: 1 },
  { name: "Priya", salary: 80000, department_id: 5 },
  { name: "Kiran", salary: 55000, department_id: 1 },
  { name: "Meena", salary: 70000, department_id: 2 },
  { name: "Vikas", salary: 72000, department_id: 4 },
  { name: "Sana", salary: 65000, department_id: 3 }
])




a. Display the name of the employee who has the highest salary:
db.employees.find().sort({ salary: -1 }).limit(1)

b. Display the biggest department with the maximum number of employees:
db.employees.aggregate([
  {
    $group: {
      _id: "$department_id",
      emp_count: { $sum: 1 }
    }
  },
  { $sort: { emp_count: -1 } },
  { $limit: 1 },
  {
    $lookup: {
      from: "departments",
      localField: "_id",
      foreignField: "_id",
      as: "department_info"
    }
  },
  {
    $project: {
      _id: 0,
      department: { $arrayElemAt: ["$department_info.name", 0] },
      emp_count: 1
    }
  }
])


c. Write a cursor which shows department-wise employee information:
const cursor = db.departments.find()

while (cursor.hasNext()) {
  const dept = cursor.next()
  print("Department: " + dept.name)
  const employees = db.employees.find({ department_id: dept._id })
  while (employees.hasNext()) {
    printjson(employees.next())
  }
  print("---------------")
}


d. List all the employees who work in the Sales department and have a salary greater than 50000:
const salesDept = db.departments.findOne({ name: "Sales" })
db.employees.find({ department_id: salesDept._id, salary: { $gt: 50000 } })
